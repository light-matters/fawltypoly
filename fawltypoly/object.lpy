(ns fawltypoly.object
  "For manipulating blender meshes and similar types."
  (:import bpy
           math))

(defn return
  "Retrieves the named (or active) object reference, for further manipulation."
  ([] (-> bpy/context
          .-active_object))
  ([name]
   (.get (.-objects bpy/data) name)))

(defn name-active
  "Labels the 'active' object."
  [name]
  (set! (-> (return)
            .-name)
        name))

(defn name-mesh
  "Labels the 'active' object's mesh. (`name`+'_mesh')"
  [name] (set! (.-data (return))
               (str name "_mesh")))

(defn add
  "Put a new object in the scene."
  [& {:keys [type
             name
             location
             rotation
             scale]
      :or {type :plane
           name "light"
           location [0.0 0.0 0.0]
           rotation [0.0 0.0 0.0]
           scale [1.0 1.0 1.0]}}]

  (case type
    :plane (do (.primitive_plane_add bpy.ops/mesh **
                                     :location location
                                     :rotation rotation
                                     :scale scale)
               (name-active name)
               (name-mesh name))
    :default (tap> "Supplied type isn't implemented. Please contact the library maintainers if this is unexpected.")))

(defn materials
  "The materials available or the materials currently assigned to the given object."
  ;; TODO: Should maybe also accept the name of an object
  ([] (-> bpy/data .-materials))
  ([object]
   (-> object .-data .-materials)))

(defn assign-material
  "Attaches the suggested 'material' to the supplied object."
  [object name]
  (let [m (-> (materials)
              (.get name))
        mo (materials object)]
    (if m (aset mo 0 m)
        (.append mo m))))

(defn select
  "Make the chosen object active. Selects all objects if no name is given."
  ([]
   (.select_all bpy.ops/object ** :action "SELECT"))
  ([name]
   (.select_set (return name)  ** :state true)))

(defn select-type
  "'Selects' all things of the type `type`, a string that can be
  - :mesh
  - ...
  "
  [type]
  (case type
    :mesh (.select-by-type bpy.ops/object ** :type "MESH")))

(defn deselect
  "Make the chosen object active. Selects all objects if no name is given."
  ([]
   (.select-all     bpy.ops/object ** :action "DESELECT"))
  ([name]))

(defn move
  "Sets the location of the object."
  ;; TODO: check that the object exists first.
  [name location]
  (set! (-> (return name) .-location) location))

(defn rotate
  "Sets the Euler rotation vector."
  [name rotation]
  (set! (-> (return name) .-rotation_euler) rotation))

(defn delete
  "Removes the object completely."
  ;; TODO: Check that the object exists.
  [name]
  (deselect)
  (select name)
  (.delete bpy.ops/object))

(defn apply_transforms
  "Make all of the initiated `position`, `rotation`, `properties` and `scale` changes happen! - if they haven't already."
  []
  (.transform_apply bpy.ops/object
                    ** :rotation true :location true :properties true :scale true))

(comment
  (deselect)
  (select)
  (select-type :mesh)

  (add :location [10.0 5.0 0.0])

  (import os)
  (.chdir os "/home/ctw/Python/fawltypoly")
  (.getcwd os)
  (import glob)
  (.glob glob "**/*.lpy")
  (require '[layout :as layout]))
