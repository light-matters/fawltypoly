(ns fawltypoly.object
  "For manipulating blender meshes and similar types."
  (:require
   [fawltypoly.material :as mat]
   [fawltypoly.interop :as i])
  (:import bpy
           math))

;; TODO:
;; - Implement protocol for prop collection
;; - How do print something to stdout while the server is running?

(defn objects
  "All of the available object references."
  []
  (.-objects bpy/data))

(defn object
  "Retrieves the active or named  object reference, for further manipulation."
  ([] (-> bpy/context
          .-active_object))
  ([name]
   (.get (objects) name)))

(defn name-active!
  "Labels the 'active' object."
  [name]
  (set! (-> (object)
            .-name)
        name))

(defn name-mesh!
  "Labels the 'active' or supplied object's mesh. (`name`+'_mesh')"
  ([name] (set! (.-data (object))
                (str name "_mesh")))
  ([name object]
   (set! (.-name (.-data object))
         (str name "_mesh"))))

(defn add!
  "Put a new object in the scene."
  [& {:keys [type
             name
             name--material
             location
             rotation
             scale]
      :or {type :plane
           name "light"
           name--material nil
           location [0.0 0.0 0.0]
           rotation [0.0 0.0 0.0]
           scale [1.0 1.0 1.0]}}]

  (case type
    :plane (.primitive_plane_add bpy.ops/mesh **
                                 :location location
                                 :rotation rotation
                                 :scale scale)
    :sphere (.primitive_uv_sphere_add bpy.ops/mesh **
                                      :location location
                                      :rotation rotation
                                      :scale scale)

    :default (tap> "Supplied type isn't implemented. Please contact the library maintainers if this is unexpected."))

  (name-active! name)
  (name-mesh! name (object name))
  (when name--material
    (mat/assign (object name) name--material))

  (object name))

(defn select
  "Make the chosen object active. Selects all objects if no name is given."
  ([]
   (.select_all bpy.ops/object ** :action "SELECT"))
  ([name]
   (.select_set (object name)  ** :state true)))

(defn select-type
  "'Selects' all things of the type `type`, a string that can be
  - :mesh
  - ...
  "
  [type]
  (case type
    :mesh (.select-by-type bpy.ops/object ** :type "MESH")))

(defn deselect
  "Make the chosen object active. Selects all objects if no name is given."
  ([]
   (.select-all     bpy.ops/object ** :action "DESELECT"))
  ([name]))

(defn move
  "Sets the location of the object."
  ;; TODO: check that the object exists first.
  [name location]
  (set! (-> (object name) .-location) location))

(defn rotate
  "Sets the Euler rotation vector."
  [name rotation]
  (set! (-> (object name) .-rotation_euler) rotation))

(defn delete
  "Removes the object completely."
  [name]
  (when ((set (.keys (objects))) name)
    (deselect)
    (select name)
    (.delete bpy.ops/object)))

(defn apply_transforms
  "Make all of the initiated `position`, `rotation`, `properties` and `scale` changes happen! - if they haven't already."
  []
  (.transform_apply bpy.ops/object
                    ** :rotation true :location true :properties true :scale true))

(comment
  ;; === Startup procedure ===
  (import os)
  (.chdir os "/home/ctw/Python/fawltypoly")
  (load-file "fawltypoly/interop.lpy")
  (load-file "fawltypoly/object.lpy")
  (load-file "fawltypoly/material.lpy")
  (require '[fawltypoly.object :as o])
  (require '[fawltypoly.interop :as i])
  (require '[fawltypoly.material :as mat])

  (i/get {:a 5} :a)
  (i/get (objects) "Cube")
  ;; === ^^^Startup procedure ===

  (first (mat/available (object "Cube")))
  (println "thing")

  (deselect)
  (select)
  (select-type :mesh)

  (mat/create-light)
  (add! :location [5.0 5.0 0.0]
        :rotation [(/ math/pi 2.0),0,0]
        :name--material "light")
  (delete "light")

  (import sys)
  (.-path sys)
  (.append (.- sys path) "/home/ctw/Python")

  (import glob)
  (.glob glob "**/*.lpy")
  (require '[scene :as scene]))
