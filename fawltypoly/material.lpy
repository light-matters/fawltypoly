(ns fawltypoly.material
  "For dealing with mesh surface properties."
  (:import bpy))

(defn materials
  "The materials available or the materials currently assigned to the given object."
  ;; TODO: WIP:
  ;; TODO: Should maybe also accept the name of an object
  ([] (-> bpy/data .-materials))
  ([object]
   (-> object .-data .-materials)))

(defn assign-material
  "Attaches the suggested 'material' to the supplied object."
  [object name]
  (let [m (-> (materials)
              (.get name))
        mo (materials object)]
    (if m (aset mo 0 m)
        (.append mo m))))

(defn create-light
  ([] (create-light "light"))
  ([name]
   (let [_ (set! (-> bpy.context/scene
                     .-render
                     .-engine)
                 "CYCLES")
         mat (bpy.data.materials/new name)
         _ (set! (.-use_nodes mat) true)
         node-tree (-> mat .-node_tree)
         nodes (-> node-tree .-nodes)
         output (.get nodes "Material Output")
         emission (.new nodes "ShaderNodeEmission")]

     (set! (-> emission
               .-inputs
               (.get "Strength")
               .-default_value)
           80)
     (-> node-tree .-links (.new (-> output .-inputs (.get "Surface"))
                                 (-> emission .-outputs
                                     (.get "Emission")))))))

(comment
  (create-light)
  (-> (materials)
      first
      .-node_tree))
