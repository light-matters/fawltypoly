(ns fawltypoly.material
  "For dealing with mesh surface properties."
  (:import bpy))

(defn available
  "The materials available or the materials currently assigned to the given object."
  ([] (-> bpy/data .-materials))
  ([object]
   (-> object .-data .-materials)))

(defn node-info [material-name]
  (let [material (bpy.data.materials/get material-name)]  ; Get the material by name
    (if (and material (.- material use_nodes))
      (for [node (-> material
                     (.- node_tree)
                     (.- nodes))]
        {:name (.- node name) :type (.- node bl_idname)})
      (print "Material not found or does not use nodes."))))

(defn assign
  "Attaches the suggested 'material' to the supplied object."
  [object name]
  (let [m (-> (available)
              (.get name))
        mo (available object)]

    (if mo
      (.append mo m)
      (aset mo 0 m))))

(defn create-light
  ([] (create-light "light"))
  ([name]
   (let [_ (set! (-> bpy.context/scene
                     .-render
                     .-engine)
                 "CYCLES")
         mat (bpy.data.materials/new name)
         _ (set! (.-use_nodes mat) true)
         node-tree (-> mat .-node_tree)
         nodes (-> node-tree .-nodes)
         output (.get nodes "Material Output")
         emission (.new nodes "ShaderNodeEmission")]

     (set! (-> emission
               .-inputs
               (.get "Strength")
               .-default_value)
           80)
     (-> node-tree .-links (.new (-> output .-inputs (.get "Surface"))
                                 (-> emission .-outputs
                                     (.get "Emission")))))))

;; (defn create-surface-colour-map [name--cmap])

;; (defn new_math_node [nodes operation]
;;   (case operation
;;     :add (let
;;           [nnew (.new nodes "ShaderNodeMath")]
;;            (set! (.-operation nnew)
;;                  "ADD"))
;;     :square (let
;;              [nnew (.new nodes "ShaderNodeMath")]
;;               (set! (.-operation nnew)
;;                     "POWER")
;;               (set! (.-default_value (second (.-inputs nnew)))
;;                     2.0))
;;     :power (let
;;             [nnew (.new nodes "ShaderNodeMath")]
;;              (set! (.-operation nnew)
;;                    "POWER"))))

(comment
  (let [material (bpy.data.materials/get "TEST")]
    (set! (.- material use_nodes) true)

    (let [nodes (-> material
                    (.-node_tree)
                    (.-nodes))]

      (new_math_node nodes :add)
;; (
      ;; (.clear nodes)
      ;; (let [nodes__new [:add
      ;;                   :square
      ;;                   :add
      ;;                   :square
      ;;                   :add
      ;;                   :square
      ;;                   :power]
      ;;       nodes__maths (doseq [op nodes__new]
      ;;                      (new_math_node nodes__new op))])

;; Connect the nodes
      ;; (let [links (.- (.- material node_tree) links)]
      ;;   (.new links (nth (.- bsdf-node outputs) 0)
      ;;         (nth (.- output-node inputs) 0))
      ;;   (.new links (nth (.- color-ramp-node outputs) 0)
      ;;         (nth (.- bsdf-node inputs) 0)))
      )))

;; (defn display-info-text [text]
;;   (.call_menu (.-wm (.-ops bpy))  {:name "INFO_MT_operator"}))
